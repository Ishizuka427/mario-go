package mario_go

import "github.com/google/gxui/math"

type Mario struct {
	Sprite
	sx      float32
	sy      float32
	reverse bool
}

func NewMario() *Mario {
	s := &Mario{}
	return s
}

func (m *Mario) Move() {
	m.sx *= 0.93
	//m.sy *= 0.9
	m.x += m.sx
	m.y += m.sy
	m.sy -= 0.4

	if math.Absf(m.sx) < 0.1 {
		m.sx = 0
	}
	if m.y < 0 {
		m.y = 0
		m.sy = 0
	}
}

func (m *Mario) Left() {
	if math.Absf(m.sx) < 0.6 {
		m.sx -= 0.4
	}else {
		m.sx -= 1.0
	}
	m.reverse = true
}

func (m *Mario) Right() {
	if math.Absf(m.sx) < 0.6 {
		m.sx += 0.4
	}else{
		m.sx += 1.0
	}
	m.reverse = false
}

func (m *Mario) Jump() {
	if !m.Jumping() {
		m.sy += 4.0
	}
}

func (m *Mario) Jumping() bool {
	if m.y == 0 {
		return false
	}
	return true
}

func (s Mario) Dots() Dots {
	var dots Dots
	if s.Jumping() {
		dots = s.jumpDots()
	} else if math.Absf(s.sx) > 0 {
		if s.sx < 0.0 && !s.reverse {
			dots = s.stopDots()
		} else if s.sx > 0.0 && s.reverse{
			dots = s.stopDots()
		} else if int(s.x)%9 < 3 {
			dots = s.run1Dots()
		} else if int(s.x)%9 < 6 {
			dots = s.run2Dots()
		} else {
			dots = s.run3Dots()
		}
	} else {
		dots = s.standDots()
	}
	if s.reverse {
		dots = reverseDost(dots)
	}
	return dots
}

func (s Mario) standDots() Dots {
	var r int32 = 0xDC2900
	var d int32 = 0x8A7301
	var m int32 = 0xFFA53C
	indices := []int32{
		3, 15, r, 4, 15, r, 5, 15, r, 6, 15, r, 7, 15, r,
		2, 14, r, 3, 14, r, 4, 14, r, 5, 14, r, 6, 14, r, 7, 14, r, 8, 14, r, 9, 14, r, 10, 14, r,
		2, 13, d, 3, 13, d, 4, 13, d, 5, 13, m, 6, 13, m, 7, 13, d, 8, 13, m,
		1, 12, d, 2, 12, m, 3, 12, d, 4, 12, m, 5, 12, m, 6, 12, m, 7, 12, d, 8, 12, m, 9, 12, m, 10, 12, m,
		1, 11, d, 2, 11, m, 3, 11, d, 4, 11, d, 5, 11, m, 6, 11, m, 7, 11, m, 8, 11, d, 9, 11, m, 10, 11, m, 11, 11, m,
		1, 10, d, 2, 10, d, 3, 10, m, 4, 10, m, 5, 10, m, 6, 10, m, 7, 10, d, 8, 10, d, 9, 10, d, 10, 10, d,
		3, 9, m, 4, 9, m, 5, 9, m, 6, 9, m, 7, 9, m, 8, 9, m, 9, 9, m,
		2, 8, d, 3, 8, d, 4, 8, r, 5, 8, d, 6, 8, d, 7, 8, d,
		1, 7, d, 2, 7, d, 3, 7, d, 4, 7, r, 5, 7, d, 6, 7, d, 7, 7, r, 8, 7, d, 9, 7, d, 10, 7, d,
		0, 6, d, 1, 6, d, 2, 6, d, 3, 6, d, 4, 6, r, 5, 6, r, 6, 6, r, 7, 6, r, 8, 6, d, 9, 6, d, 10, 6, d, 11, 6, d,
		0, 5, m, 1, 5, m, 2, 5, d, 3, 5, r, 4, 5, m, 5, 5, r, 6, 5, r, 7, 5, m, 8, 5, r, 9, 5, d, 10, 5, m, 11, 5, m,
		0, 4, m, 1, 4, m, 2, 4, m, 3, 4, r, 4, 4, r, 5, 4, r, 6, 4, r, 7, 4, r, 8, 4, r, 9, 4, m, 10, 4, m, 11, 4, m,
		0, 3, m, 1, 3, m, 2, 3, r, 3, 3, r, 4, 3, r, 5, 3, r, 6, 3, r, 7, 3, r, 8, 3, r, 9, 3, r, 10, 3, m, 11, 3, m,
		2, 2, r, 3, 2, r, 4, 2, r, 7, 2, r, 8, 2, r, 9, 2, r,
		1, 1, d, 2, 1, d, 3, 1, d, 8, 1, d, 9, 1, d, 10, 1, d,
		0, 0, d, 1, 0, d, 2, 0, d, 3, 0, d, 8, 0, d, 9, 0, d, 10, 0, d, 11, 0, d,
	}
	return MakeDots(indices)
}

func (s Mario) stopDots() Dots {
	var r int32 = 0xDC2900
	var d int32 = 0x8A7301
	var m int32 = 0xFFA53C
	indices := []int32{
		3, 15, r, 4, 15, r, 5, 15, r, 6, 15, r, 7, 15, r,
		1, 14, d, 2, 14, r, 3, 14, r, 4, 14, r, 5, 14, r, 6, 14, r, 7, 14, r, 8, 14, r, 9, 14, r,
		0, 13, d, 1, 13, d, 2, 13, d, 3, 13, d, 4, 13, d, 5, 13, d, 6, 13, m, 7, 13, d, 8, 13, m,
		-1, 12, m, 0, 12, m, 1, 12, d, 2, 12, m, 3, 12, m, 4, 12, d, 5, 12, m, 6, 12, m, 7, 12, m, 8, 12, m, 9, 12, m, 10, 12, m,
		-1, 11, m, 0, 11, m, 1, 11, d, 2, 11, m, 3, 11, m, 4, 11, d, 5, 11, d, 6, 11, m, 7, 11, m, 8, 11, d, 9, 11, d, 10, 11, m, 11, 11, m,
		0, 10, m, 1, 10, m, 2, 10, d, 3, 10, m, 4, 10, m, 5, 10, m, 6, 10, m, 7, 10, m, 8, 10, m, 9, 10, d, 10, 10, d,
		1, 9, r, 2, 9, r, 3, 9, r, 4, 9, d, 5, 9, d, 6, 9, d, 7, 9, r, 8, 9, m, 9, 9, m,
		0, 8, r, 1, 8, r, 2, 8, m, 3, 8, m, 4, 8, m, 5, 8, d, 6, 8, d, 7, 8, d, 8, 8, d, 9, 8, d, 10, 8, d,
		0, 7, r, 1, 7, d, 2, 7, m, 3, 7, m, 4, 7, m, 5, 7, d, 6, 7, d, 7, 7, d, 8, 7, d, 9, 7, d, 10, 7, d,
		0, 6, r, 1, 6, r, 2, 6, r, 3, 6, m, 4, 6, m, 5, 6, d, 6, 6, d, 7, 6, d, 8, 6, d, 9, 6, d, 10, 6, d,
		1, 5, r, 2, 5, r, 3, 5, r, 4, 5, r, 5, 5, r, 6, 5, d, 7, 5, d, 8, 5, d, 9, 5, d,
		1, 4, r, 2, 4, d, 3, 4, d, 4, 4, d, 5, 4, r, 6, 4, r, 7, 4, r, 8, 4, r,
		2, 3, d, 3, 3, d, 4, 3, d, 5, 3, d, 6, 3, r, 7, 3, r, 8, 3, r,
		-1, 2, d, 1, 2, d, 2, 2, r, 3, 2, r, 4, 2, d, 5, 2, d, 6, 2, d, 7, 2, r,
		-1, 1, d, 0, 1, d, 1, 1, d, 2, 1, d, 3, 1, d, 4, 1, r,
		0, 0, d, 1, 0, d, 2, 0, d, 3, 0, d,
	}
	return MakeDots(indices)
}

func (s Mario) run1Dots() Dots {
	var r int32 = 0xDC2900
	var d int32 = 0x8A7301
	var m int32 = 0xFFA53C
	indices := []int32{
		3, 14, r, 4, 14, r, 5, 14, r, 6, 14, r, 7, 14, r,
		2, 13, r, 3, 13, r, 4, 13, r, 5, 13, r, 6, 13, r, 7, 13, r, 8, 13, r, 9, 13, r, 10, 13, r,
		2, 12, d, 3, 12, d, 4, 12, d, 5, 12, m, 6, 12, m, 7, 12, d, 8, 12, m,
		1, 11, d, 2, 11, m, 3, 11, d, 4, 11, m, 5, 11, m, 6, 11, m, 7, 11, d, 8, 11, m, 9, 11, m, 10, 11, m,
		1, 10, d, 2, 10, m, 3, 10, d, 4, 10, d, 5, 10, m, 6, 10, m, 7, 10, m, 8, 10, d, 9, 10, m, 10, 10, m, 11, 10, m,
		1, 9, d, 2, 9, d, 3, 9, m, 4, 9, m, 5, 9, m, 6, 9, m, 7, 9, d, 8, 9, d, 9, 9, d, 10, 9, d,
		3, 8, m, 4, 8, m, 5, 8, m, 6, 8, m, 7, 8, m, 8, 8, m, 9, 8, m,
		2, 7, d, 3, 7, d, 4, 7, d, 5, 7, d, 6, 7, r, 7, 7, d, 9, 7, m,
		1, 6, m, 2, 6, d, 3, 6, d, 4, 6, d, 5, 6, d, 6, 6, d, 7, 6, d, 8, 6, m, 9, 6, m, 10, 6, m,
		0, 5, m, 1, 5, m, 2, 5, r, 3, 5, d, 4, 5, d, 5, 5, d, 6, 5, d, 7, 5, d, 8, 5, m, 9, 5, m,
		0, 4, d, 1, 4, d, 2, 4, r, 3, 4, r, 4, 4, r, 5, 4, r, 6, 4, r, 7, 4, r, 8, 4, r,
		0, 3, d, 1, 3, r, 2, 3, r, 3, 3, r, 4, 3, r, 5, 3, r, 6, 3, r, 7, 3, r, 8, 3, r,
		-1, 2, d, 0, 2, d, 1, 2, r, 2, 2, r, 3, 2, r, 5, 2, r, 6, 2, r, 7, 2, r,
		-1, 1, d, 4, 1, d, 5, 1, d, 6, 1, d,
		4, 0, d, 5, 0, d, 6, 0, d, 7, 0, d,
	}
	return MakeDots(indices)
}

func (s Mario) run2Dots() Dots {
	var r int32 = 0xDC2900
	var d int32 = 0x8A7301
	var m int32 = 0xFFA53C
	indices := []int32{
		3, 15, r, 4, 15, r, 5, 15, r, 6, 15, r, 7, 15, r,
		2, 14, r, 3, 14, r, 4, 14, r, 5, 14, r, 6, 14, r, 7, 14, r, 8, 14, r, 9, 14, r, 10, 14, r,
		2, 13, d, 3, 13, d, 4, 13, d, 5, 13, m, 6, 13, m, 7, 13, d, 8, 13, m,
		1, 12, d, 2, 12, m, 3, 12, d, 4, 12, m, 5, 12, m, 6, 12, m, 7, 12, d, 8, 12, m, 9, 12, m, 10, 12, m,
		1, 11, d, 2, 11, m, 3, 11, d, 4, 11, d, 5, 11, m, 6, 11, m, 7, 11, m, 8, 11, d, 9, 11, m, 10, 11, m, 11, 11, m,
		1, 10, d, 2, 10, d, 3, 10, m, 4, 10, m, 5, 10, m, 6, 10, m, 7, 10, d, 8, 10, d, 9, 10, d, 10, 10, d,
		3, 9, m, 4, 9, m, 5, 9, m, 6, 9, m, 7, 9, m, 8, 9, m, 9, 9, m,
		2, 8, d, 3, 8, d, 4, 8, r, 5, 8, d, 6, 8, d, 7, 8, d,
		1, 7, d, 2, 7, d, 3, 7, d, 4, 7, d, 5, 7, r, 6, 7, r, 7, 7, d, 8, 7, d,
		1, 6, d, 2, 6, d, 3, 6, d, 4, 6, r, 5, 6, r, 6, 6, m, 7, 6, r, 8, 6, r, 9, 6, m,
		1, 5, d, 2, 5, d, 3, 5, d, 4, 5, d, 5, 5, r, 6, 5, r, 7, 5, r, 8, 5, r, 9, 5, r,
		1, 4, r, 2, 4, d, 3, 4, d, 4, 4, m, 5, 4, m, 6, 4, m, 7, 4, r, 8, 4, r, 9, 4, r,
		2, 3, r, 3, 3, d, 4, 3, m, 5, 3, m, 6, 3, r, 7, 3, r, 8, 3, r,
		3, 2, r, 4, 2, r, 5, 2, r, 6, 2, d, 7, 2, d, 8, 2, d,
		3, 1, d, 4, 1, d, 5, 1, d, 6, 1, d, 7, 1, d, 8, 1, d, 9, 1, d, 10, 1, d,
		3, 0, d, 4, 0, d, 5, 0, d, 6, 0, d,
	}
	return MakeDots(indices)
}

func (s Mario) run3Dots() Dots {
	var r int32 = 0xDC2900
	var d int32 = 0x8A7301
	var m int32 = 0xFFA53C
	indices := []int32{
		3, 15, r, 4, 15, r, 5, 15, r, 6, 15, r, 7, 15, r,
		2, 14, r, 3, 14, r, 4, 14, r, 5, 14, r, 6, 14, r, 7, 14, r, 8, 14, r, 9, 14, r, 10, 14, r,
		2, 13, d, 3, 13, d, 4, 13, d, 5, 13, m, 6, 13, m, 7, 13, d, 8, 13, m,
		1, 12, d, 2, 12, m, 3, 12, d, 4, 12, m, 5, 12, m, 6, 12, m, 7, 12, d, 8, 12, m, 9, 12, m, 10, 12, m,
		1, 11, d, 2, 11, m, 3, 11, d, 4, 11, d, 5, 11, m, 6, 11, m, 7, 11, m, 8, 11, d, 9, 11, m, 10, 11, m, 11, 11, m,
		1, 10, d, 2, 10, d, 3, 10, m, 4, 10, m, 5, 10, m, 6, 10, m, 7, 10, d, 8, 10, d, 9, 10, d, 10, 10, d,
		3, 9, m, 4, 9, m, 5, 9, m, 6, 9, m, 7, 9, m, 8, 9, m, 9, 9, m,
		0, 8, d, 1, 8, d, 2, 8, d, 3, 8, d, 4, 8, r, 5, 8, r, 6, 8, d, 7, 8, d,
		-2, 7, m, -1, 7, m, 0, 7, d, 1, 7, d, 2, 7, d, 3, 7, d, 4, 7, r, 5, 7, r, 6, 7, r, 7, 7, d, 8, 7, d, 9, 7, d, 10, 7, m, 11, 7, m, 12, 7, m,
		-2, 6, m, -1, 6, m, 0, 6, m, 2, 6, d, 3, 6, d, 4, 6, r, 5, 6, m, 6, 6, r, 7, 6, r, 8, 6, r, 9, 6, d, 10, 6, d, 11, 6, m, 12, 6, m,
		-2, 5, m, -1, 5, m, 2, 5, r, 3, 5, r, 4, 5, r, 5, 5, r, 6, 5, r, 7, 5, r, 8, 5, r, 11, 5, d,
		1, 4, r, 2, 4, r, 3, 4, r, 4, 4, r, 5, 4, r, 6, 4, r, 7, 4, r, 8, 4, r, 9, 4, r, 10, 4, d, 11, 4, d,
		0, 3, r, 1, 3, r, 2, 3, r, 3, 3, r, 4, 3, r, 5, 3, r, 6, 3, r, 7, 3, r, 8, 3, r, 9, 3, r, 10, 3, d, 11, 3, d,
		-1, 2, d, 0, 2, d, 1, 2, r, 2, 2, r, 3, 2, r, 7, 2, r, 8, 2, r, 9, 2, r, 10, 2, d, 11, 2, d,
		-1, 1, d, 0, 1, d, 1, 1, d,
		0, 0, d, 1, 0, d, 2, 0, d,
	}
	return MakeDots(indices)
}

func (s Mario) jumpDots() Dots {
	var r int32 = 0xDC2900
	var d int32 = 0x8A7301
	var m int32 = 0xFFA53C
	indices := []int32{
		10, 15, m, 11, 15, m, 12, 15, m,
		3, 14, r, 4, 14, r, 5, 14, r, 6, 14, r, 7, 14, r, 10, 14, m, 11, 14, m, 12, 14, m,
		2, 13, r, 3, 13, r, 4, 13, r, 5, 13, r, 6, 13, r, 7, 13, r, 8, 13, r, 9, 13, r, 10, 13, r, 11, 13, m, 12, 13, m,
		2, 12, d, 3, 12, d, 4, 12, d, 5, 12, m, 6, 12, m, 7, 12, d, 8, 12, m, 10, 12, d, 11, 12, d, 12, 12, d,
		1, 11, d, 2, 11, m, 3, 11, d, 4, 11, m, 5, 11, m, 6, 11, m, 7, 11, d, 8, 11, m, 9, 11, m, 10, 11, d, 11, 11, d, 12, 11, d,
		1, 10, d, 2, 10, m, 3, 10, d, 4, 10, d, 5, 10, m, 6, 10, m, 7, 10, m, 8, 10, d, 9, 10, m, 10, 10, m, 11, 10, m, 12, 10, d,
		1, 9, d, 2, 9, d, 3, 9, m, 4, 9, m, 5, 9, m, 6, 9, m, 7, 9, d, 8, 9, d, 9, 9, d, 10, 9, d, 11, 9, d,
		3, 8, m, 4, 8, m, 5, 8, m, 6, 8, m, 7, 8, m, 8, 8, m, 9, 8, m, 10, 8, d,
		-1, 7, d, 0, 7, d, 1, 7, d, 2, 7, d, 3, 7, d, 4, 7, r, 5, 7, d, 6, 7, d, 7, 7, d, 8, 7, r, 9, 7, d,
		-2, 6, d, -1, 6, d, 0, 6, d, 1, 6, d, 2, 6, d, 3, 6, d, 4, 6, d, 5, 6, r, 6, 6, d, 7, 6, d, 8, 6, d, 9, 6, r, 12, 6, d,
		-3, 5, m, -2, 5, m, -1, 5, d, 0, 5, d, 1, 5, d, 2, 5, d, 3, 5, d, 4, 5, d, 5, 5, r, 6, 5, r, 7, 5, r, 8, 5, r, 9, 5, r, 12, 5, d,
		-3, 4, m, -2, 4, m, -1, 4, m, 1, 4, r, 2, 4, r, 3, 4, d, 4, 4, r, 5, 4, r, 6, 4, m, 7, 4, r, 8, 4, r, 9, 4, m, 10, 4, r, 11, 4, d, 12, 4, d,
		-2, 3, m, 0, 3, d, 1, 3, r, 2, 3, r, 3, 3, r, 4, 3, r, 5, 3, r, 6, 3, r, 7, 3, r, 8, 3, r, 9, 3, r, 10, 3, r, 11, 3, d, 12, 3, d,
		-1, 2, d, 0, 2, d, 1, 2, d, 2, 2, r, 3, 2, r, 4, 2, r, 5, 2, r, 6, 2, r, 7, 2, r, 8, 2, r, 9, 2, r, 10, 2, r, 11, 2, d, 12, 2, d,
		-2, 1, d, -1, 1, d, 0, 1, d, 1, 1, r, 2, 1, r, 3, 1, r, 4, 1, r, 5, 1, r, 6, 1, r, 7, 1, r,
		-2, 0, d, 1, 0, r, 2, 0, r, 3, 0, r, 4, 0, r,
	}
	return MakeDots(indices)
}

func reverseDost(dots Dots) Dots {
	for i, dot := range dots {
		dots[i].X = 13 - dot.X
	}
	return dots
}
